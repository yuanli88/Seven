#define _CRT_SECURE_NO_WARNINGS 1
#pragma warning(disable:6031)
#include <stdio.h>
#include <ctype.h>
#include<stdlib.h>
#include<time.h>
//int main()
//{
//	//char a;
//	//scanf("%c", &a);
//	//printf("%d", a);
//	
//	
//	//float a;
//	//while (1)
//	//{
//	//	scanf("%f", &a);
//	//	printf("%.0f", a);
//	//}
//	//输入一个数字,打印这个数字
//	int a;
//	scanf("%d", &a);
//	printf("%d", a);
//
//	return 0;
//}


//
//int main()
//{
//	int a, b;
//	scanf("%d %d", &a, &b);
//	printf("a=%d,b=%d", b, a);
//
//	return 0;
//}\
/////////////////////////////////////////////////////////////////////
// //      大小写转化 头文件 #include <ctype.h>
//int main()
//{
//    int a,b;
//    a = 0;
//    scanf("%c", &a);
//    b = toupper(a);
//    printf("%c", b);
//    return 0;
    //首先 int a b 这个初始化没有什么影响.
    //我们输入的是字母,要将字母转化为大写,那么要把输入的字母以字符的形式
    //存储起来.故输入那里给的是%c
    //输出也是以字符的形式,所以 printf那里也是%c
//}
////////////////////////////////////////////////////////////////////
//          利用循环语句,多次进行字母大小写的转化
//int main()
//{
//    char a;
//    //getchar()这个函数包括了输入scanf <<<并且是一个一个字符得读取>>>> 这句话似乎有问题
//    // EOF 就是为空,不是0 比如\n就是 eof  
//    while (  ( a = getchar()  ) != EOF)
//    {
//        printf("%c", tolower(a));
//
//    }
//    return 0;
//}
/////////////////////////////////////////////////////////////////////
//                  十六进制转化为十进制..
//int main()
//{
//    //“%md”输出域宽
//    int a = 0xABCDEF;
//    printf("%15d", a);
//    return 0;
//}
////////////////////////////////////////////////////////////////////
//                将十进制转化为八进制和十六进制
//int main() 
//{
//    int a = 1234;
//    int a8, a16;
//    a8 = 1234;
//    a16 = 1234;
//    //%X %x 输出时,十六进制一个是小写的字母 一个是大写的.%前面的ox只是为了打印出来这个字符
//    printf("%05o 0X%X", a8, a16);
//    return 0;
//}
////////////////////////////////////////////////////////////////////
//                     三个数比较大小
//int main()
//{
//    int i = 0;
//    int max = 0;
//    int arr[4] = { 0 };
//    //如果不给arr定义大小的话,他就会debug 错误
//    //输入三个数
//    while (i < 4)
//    {
//        scanf("%d", &arr[i]);
//        i++;
//    }
//    max = arr[0];
//    i = 1;
//    //比较大小
//    while (i < 4)
//    {
//        if (max <= arr[i])
//        {
//            max = arr[i];
//            i++;
//        }
//        else
//            i++;
//    }
//    //输出最大值
//    printf("%d", max);   
//    return 0;
//}
/////////////////////////////////////////////////////////////////////
//                    把多个数字放进数组里面
//int main()
//{
//    int i = 0;
//    int arr[8];
//    while (i < 7)
//    {
//       scanf("%d", &arr[i]);
//       /*printf("%d\n", arr[i]);*/
//       i++;
//    }
//    for (i = 0; i < 7; i++)
//    {
//        printf("%d", arr[i]);
//    }
//
//
//    return 0;
//}
//////////////////////////////////////////////////////////////////////////////////
//把数组里面的字符转换为ascll码 然后全部相加,得到了这些字符串的十进制的数字
//待完成
//int main()
//{
//    char a[7] = { "A","B","C","D","E","F" };
//    int i = 0;
//    int all = 0;
//    int num = 0;
//
//
//    while (i < 5)
//    {
//        num = a[i];
//        i++;
//        static all = num + all;
//
//
//    }
/////////////////////////////////////////////////////////////////////////////////
//           丁给的代码 关于计算两个数的乘积
//int main()
//{
//    int x, y, n;
//    srand(time(NULL));
//    x = rand() % 10 + 1;
//    y = rand() % 10 + 1;
//    printf("%d * %d=", x, y); 
//    scanf("%d", &n);
//    while(1)
//    {  
//        if (n == x * y) 
//        {
//            printf("Right!\n");
//            x = rand() % 10 + 1;
//            y = rand() % 10 + 1;
//            printf("%d*%d=", x, y);
//            scanf("%d", &n);
//        }
//        else
//        {
//         printf("Wrong!Please try again.\n");
//         scanf("%d", &n);
//         
//        }
//        
//    }
//    return 0;
//}
/////////////////////////////////////////////////////////////////////////////////////////////
//                             输入十六进制和八进制的数 相加输出十进制的数
//                             
//  %x %o 就是相当于%d 占位符
//int main()
//{
//    int  a= 0;
//    scanf("%x", &a );
//    printf("%d", a);
//    
//    /*printf("%d", a + b);*/
//    return 0;
//}
//            这个是正确的
// int main() 
//{
//    int a, b = 0;
//    scanf("%x %o", &a, &b);
// 因为都是以二进制的形式把数据存储在电脑里面的
// 所以在相加是可以直接相加。。。
//    printf("%d", a + b);
//    return 0;
//}
/////////////////////////////////////////////////////////////////////////////////////////////
//                                          乘法表(完成)
//int main()
//{
//    //求多少的乘法
//    int n = 9;
//
//    for (int i = 1; i <= n; i++)
//    {
//        for (int j = 1; j <= i; j++)
//        {
//            printf("%d * %d = %2d", i, j, i * j);
//        }
//        printf("\n");
//    }
//    return 0;
//}
//////////////////////////////////////////////////////////////////////////////////////////////
//                n的阶乘
//int main()
//{
//    int i = 1; //用于控制循环次数
//    int a = 0;//用于阶乘的1
//    int ji_1 = 0;//前一次阶乘剩下的
//    int ji_2 = 0;//这一次阶乘应该是
//    int n = 0;//要几次阶乘
//    scanf("%d", &n);
//    for (i =1,a = 1, ji_2 = 1,ji_1 = 1 ; i <= n; i++,a++)
//    {
//          ji_2 = ji_1 * a;      
//          ji_1 = ji_2;
//    }
//    printf("%d\n", ji_2);//打印最后的阶乘数
//    return 0;
//}
//////////////////////////////////////////////////////////////////////////////////////////
//                 n的阶乘之和

//int main()
//{
//    //和
//    int nsum = 0;
//    //第一次
//    int num = 1;
//    //多少的阶乘
//   
//    //循环n-1次？
//    int arr[3] = { 1,2,3 };
//    int i = 0;
//    for (int a = 1;a <= 3;a++,i--)
//    {
//        num = 1;
//        for ( i = 2; i <= arr[i]&&i>-1; i--)
//        {
//            num = num * (i+1);       
//        }
//        nsum = nsum + num ;
//      
//    }
// printf("%d\n", nsum);
//   
//
//
//    return 0;
//}
/////////////////////////////////////////////////////////////////////////////////////////
//                把输入的小数输出为只有个位数的整数
//这里知识点 ：
// 1 小数变整数 
// 2 一个两位数变成一位数
//int main()
//{
//    float  a = 0;
//    int b = 0;
//    scanf("%f" ,&a);
//    b = (int)a;
//    //取模符号只能运用与整数
//    //float类型的直接报错
//    b = b%10;
//    printf("%d", b);
//    return 0;
//}
////////////////////////////////////////////////////////////////////////////////////////////////
//           输入一个在int范围内的整数，求他的个位数
//int test(int x)
//{
//    if (x >= 10)
//    {
//        x = x % 10;
//        test(x);
//    }io
//    return x;
//
//}
////上面这个是用函数来实现循环 很强
//int main()
//{
//    int a = 0;
//    while (scanf("%d", &a) != -1)
//    {
//        a = test(a);
//        printf("%d", a);
//        break;
//    }
//    return 0;
//}
////////////////////////////////////////////////////////////////////////////////////////////////
//用二分法求一个有序数组某一个数的下标
//int main()
//{
//    int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//    int left, right,mid,num = 0;
//    //输入一个要找的数字
//    scanf("%d", &num);
//    //求这个数组有多少个数字
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    //二分法开始搞起来
//    left = 0;
//    right = sz - 1;
//    while (left <= right)
//    {
//        mid = (left + right) / 2;
//        if (mid < num)
//        {
//            left = mid + 1;
//        }
//        else if (mid > num)
//        {
//            right = mid - 1;
//        }
//        else
//        {
//            printf("找到了，下标是:%d", arr[mid]);
//            break;
//        }
//    }
//    if(left > right)
//        printf("没有这个数");
//    return 0;
//}
///////////////////////////////////////////////////////////////////////////////////////////////
//                          求2的n次方的和与积
//int main()
//{
//    //先来和  (成果啦啦啦)
//    int n = 0;
//    int num = 1;
//    int sum = 1;
//    scanf("%d", &n);
//    for (int j = 1; j <= n&&n>0; n--)
//    {
//        num = 1;
//         for(int i = 0;i<n;i++)
//            {
//                num = num * 2;
//            }
//         /*printf("%d\n",num);*/
//         sum = sum + num;
//    }
//   
//    
//    printf("%d\n",sum);
//    return 0;
//
//}//////////////////////////////////////////
//            单独2的n次方(completed)
//int main()
//{
//    int num = 1;
//    int n = 0;
//    scanf("%d", &n);
//    for (int i = 1; i <= n; i++)
//    {
//        num = num * 2;
//    }
//    printf("%d", num);
//
//}
////////////////////////////////////////////////////////////////////////////////////////////////
//                                打印一个倒三角
#include <string.h>
//int main()
//{
//    char arr1[] = "~~~~~~~~~~~~~~~";
//    char arr2[] = "               ";
//    int left, right = 0;
//    left = 0;
//    right = strlen(arr1)-1;
//    while (left <= right)
//    {
//        arr1[left] = arr2[left];
//        arr1[right] = arr2[right];
//        left++;
//        right--;
//        printf("%s\n", arr1);
//    }
//
//
//
//    return 0;
//}
/////////////////////////
//          正三角
//int main()
//{
//    char arr1[] = "~~~~~~~~~~~~~~~";
//    char arr2[] = "               ";
//    int left, right = 0;
//    left = (strlen(arr1) - 1)/2;
//    right = (strlen(arr1) - 1) / 2;
//    while (left >=0&&right<= strlen(arr1) - 1)
//    {
//        arr1[left] = arr2[left];
//        arr1[right] = arr2[right];
//        left--;
//        right++;
//        printf("%s\n", arr1);
//    }
//    return 0;
//}
 ///////////////////////////////////////////////////////////////////////////////////////////
//                          交换两个数的值（地址） 

////int main()
//{
//    int a = 10;
//    int b = 44;
//    
//    a = 10;
//    
//    
//    printf("%d", *pa);
//
//
//    return 0;
//}
/////////////////////////////////////////////////////////////////////////////////////////////
//           打印100到200的素数  素数是只能被1和他本身整除的数
//（成功）
//int main()
//{
//
//
//    int count = 0;
//    for (int i = 100; i <= 100000; i++)
//    {
//        //引入了一个变量 对不同情况给这个变量不同的值，以此来判断是否为素数
//          int flag = 0;
//        for (int j = 2; j <= i/2-1; j++)
//        {
//            if (i % j == 0)
//            {
//                flag = 1;
//                break;
//            }
//        }
//        if (flag == 0)
//        {
//            count++;
//            printf("%d ", i);
//            
//        }
//    }
//    printf("%d ", count);
//    return 0;
//}
/////////////////////（写函数的方法）
//一个函数
//int is_sushu(int n)
//{
//    for (int j = 2; j <= n / 2 - 1; j++)
//    {
//        if (n % j == 0)
//        {
//            //这个函数返回值 0 那么就不是素数
//            return 0;
//        }
//    }
    //如果 函数返回值 1 那么就是说这个数是素数
    /*return 1;
}*/
////////////////////////////////
//int main()
//{
    /*
       for (int i = 100; i <= 200; i++)
    {
       
        if (is_sushu(i) == 1)
        {
            printf("%d ",i);
            count++;
        }
    }
    printf("%d ", count);
    */
 /*   int count = 0;*/

    /*//maopaopaixu
      int i = 0;
    int a[10];
    for (int i = 0; i < 10; i++) {
        scanf("%d", &a[i]);
    }
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10 - i; j++) {
            if (a[j] < a[j + 1]) {
                int temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
            }
        }
    }
    for (int i = 0; i < 10; i++) {
        printf("%d ", a[i]);
        }
    */
  
    //return 0;
//}
///////////////////////////////////////////////////////////////////////////////////////////////////
//             数字沙漏  

//int main()
//{
//    int n = 0;
//    int m = 0;
//    int kong_1 = 0;
//    //要以哪个数字作为最开始的
//    scanf("%d", &n);
//    
//    //加入一个m 与n做比较
//    m = n;
//    //因为自己写出来的代码带入2的时候出现错误
//    //所以单独加了一个2的代码
//    if (n == 2)
//    {
//        printf("%d\n", 222);
//        printf(" %d\n",  1 );
//        printf("%d\n", 222);
//        return 0;
//    }
//    //上面个三角形
//    for (int i = 0; n > i; n--)
//    {
//
//        for (kong_1 = m - n; kong_1 > 0; kong_1--)
//        {
//            printf("%s", " ");
//        }
//
//        for (int j = 1; j <= 2 * n - 1; j++)
//        {
//            printf("%d", n);
//        }
//        printf("\n");
//        
//    }
//    //下面个数字三角形
//            int kong_2 = 0;
//            int n_2 = 2;
//            int kk = n_2;
//            
//            while (n_2<= m -1)
//            {
//                for (int a = 0; a < m-1; a++)
//                {
//                    for (int c = kk; c <= m - n_2+1 ; c++)
//                    {
//                        printf("%s", " ");
//                    }
//                    for (int b = 0; b < 2 * n_2 - 1; b++)
//                    {
//                        printf("%d", n_2);
//                    }
//                    printf("\n");
//                    n_2++;
//
//                }
//
//            }
//
//    return 0;
//}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//输入n科成绩（浮点数表示），统计其中的最高分，最低分以及平均分。
//
// 成绩使用百分制且不可能出现负数       （完成）
//int main()
//{
//    int n;
//    /*n科成绩*/
//    printf("请输入几科成绩=");
//    scanf("%d", &n);
//    
//    float arr[100] = {0};
//    for (int i = 0; i < n; i++)
//    {
//        printf("亲输入一科的成绩（浮点数）=");
//        scanf("%f=", &arr[i]);
//    }
    //求最大数（浮点数）
 /*   float max = 0;
    max = arr[0];
    for (int i = 1; i < n; i++)
    {
        if (arr[i] > max)
        {
            max = arr[i];
        }
    }*/
    /*for (int i = 1; i < n; i++)
    {
        if (max < arr[i])
        {
            max = arr[i];
        }
        else if(max > arr[i])
        { 
            max = max;
        }
        else if (max = arr[i])
        {
            max = max;
        }
    }*/
    //最小数 
    //float min = 0;
    //min = arr[0];
    //for (int a = 1;a<n;a++)
    //{
    //    if (min < arr[a])
    //    {
    //        min = min;
    //    }
    //    else if (min > arr[a])
    //    {
    //        min = arr[a];
    //    }
    //    else if (min = arr[a])
    //    {
    //        min = min;
    //    }
    //}
    //printf("%.2f ", max);
    //printf("%.2f ", min);
    ////平均值
    //float sum,ave;
    //sum = 0;
    //for(int b = 0;b< n ;b++)
    //{
    //    sum = sum + arr[b];
    //}
    //
    //ave = sum / n;
    //printf("%.2f ", ave);
    //return 0;
//}
/* for(int j =0;j<3;j++)
 {
     printf("%.20f ", arr[j]);
     printf("%.20f", arr[j] + 0.1);
 }*/
 //2.00000000000000000000 2.10000000000000008882
 //4.00000000000000000000 4.09999999999999964473
 //5.00000000000000000000 5.09999999999999964473
 /*会发现 结果并不是和常规的数字相同，这个精度的问题有点东西
 待解决*/
 /* 浮点数比大小难道有什么特别之处吗*/
///////////////////////////////////////////////////////////////////////////////////////////////
 // 用函数的方法来对一个有序数组求他的某个值


///////////////////////////////////////////////////////////////////////////////////////////////
//调用一次函数  num的值就会增加1
//int num_(int n)
//{
//    int num = 0;
//    num = num + n;
//    return num;
//}
//int main()
//{
//    //函数的使用次数;
//    int n = 0;
//    scanf("%d", &n); 
//    int num = 0;    
//    num  = num_(n);    
//    printf("%d", num);
//
//    return 0;
//}
//////////////////
//指针的方法;
//传指针 int* p 代表int类型的指针 p表示这个指针的名字是什么
//void add(int* p)
//{
//    (*p)++;
//    //用地址的方法 直接联系到num的地址 对地址所对应的值进行改变
//    //所以是num直接被改变 而不是上面一种num的拷贝被改变
//    //这种方法就没有返回值
//}
//int main()
//{
//    int num = 0;
//    //直接传送num的地址
//    add(&num);
//    printf("%d\n", num);
//        
//    return 0;
//}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//     利用函数来计算m  函数为三个数中的最大值 (完成)


//利用数组 然后一个一个比较 其实这个方法可能也适用于多个数字 就是可能会需要利用
// 循环 把多个数字放进数组里面  然后再在函数里面对数组进行调用
// 
//int max3(int a,int b,int c)
//{
//    int arr[3] = { 0 };
//    arr[0] = a;
//    arr[1] = b;
//    arr[2] = c;
//    int max = arr[0];
//    for (int i = 1; i < 3; i++)
//    {
//        if (max < arr[i])
//        {
//            max = arr[i];
//        }
//        else if (max == arr[i])
//        {
//            max = max;
//        }
//        else if (max > arr[i])
//        {
//            max = max;
//        }
//    }
//    return max;
//}



//你这个比大小没有考虑相等的情况(所以是错误的)
//int max3(int a, int b, int c)
//{
//    
//    if (a > b)
//    {
//        if (a > c)
//        {
//            return a;
//        }
//        else
//        {
//            return c;
//        }
//    }
//    else if (a < b)
//    {
//        if (a < c)
//        {
//            if (b > c)
//            {
//                return b;
//            }
//            return c;
//        }
//        else
//        {
//            return b;
//        }
//    }
//    return 0;
//}
//double  m(float x ,float y, float z)
//{
//    int a, b, c;
//    float m = 0;
//    //之前括号里面是abc的变量 应为对abc进行了加减 所以会影响后面bc的值
//
//    a = max3(x + y, y, z);
//    b = max3(x, y + z, z);
//    c = max3(x, y, y + z);
//    m =  1.0*a/(b + c);
//    return m;
//}
//int main() 
//{
//    //下次不能这样定义
//    float a = 1;
//    float b = 1;
//    float c = 1;
//    double  m_1 = 0;
//
//    //scanf("%f %f %f", &a, &b, &c);
//    m_1 = m(a,b,c);
//    printf("%.2f", m_1);
//    return 0;
//}
//int main()
//{
//    for (int i = 0; i < 10; i++)
//    {
//        if (i == 5)
//            printf("%d ", i);
//    }
//    return 0;
//}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                          计算体积 （完成）
//int main()
//{
//    int r, h;
//    float v,num; 
//    scanf("%d %d", &h, &r);
//    v = 3.14 * r * r * h/1000;
//    num = 10 / v;
//    int a = (int)num;
//    int b = (int)(num + 0.99999);
//    if (a == b)
//        printf("%f", num);
//    else
//        printf("%.0f", num + 1);
//    return 0;
//}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//                               判断一个数是不是整数(用int的方法)上面这个题利用了这个方法
//int main()
//{
//    float a;
//    a = 0.5;
//    int b = (int)a;
//    //没有四舍五入这个想法，将一个浮点数（int）化，就是把小数点后面的数删去。1.9999--1；
//
//    int c = (int)(a + 0.999999) ;
//    if (b == c)
//        printf("ok");
//    else
//        printf("no");
//
//    return 0;
// }
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                             交换两个数的函数

//void swap(int *px,int *py)
//{
//    int temp = *px;
//    *px = *py;
//    *py = *px;
//}
///////////////////////////////////////////////////////////////////////////////////////////////////
//                   打印1-100 3的倍数的数字
//int main()
//{
//    int arr[100];
//    for (int i = 1; i < 100; i++)
//    {
//        arr[i-1] = i;
//    }
//    printf("%s\n","=========================================");
//    for (int a = 0; a < 100; a++)
//    {
//        if (arr[a] % 3 == 0)
//        {
//            printf("%d ", arr[a]);
//        }
//    }
//
//    return 0;
//}
///////////////////////////////////////////////////////////////////////////////////////////////////
//                           找两个数的最大公约数、
//int cifang(int a)
//{
//    int sum = 1;
//    for (int j = 1; j <=a; j++)
//    {
//        sum = 2 * sum;
//    }
//    return sum ;
//}
//int main()
//{
//    //输入两个数
//    int a, b = 0;
//    scanf("%d %d", &a, &b);
//    ////////////////////下面这个方法是不可用的//////////////////////////////////////
//    //两个数同时除以2（添加一个量来确定除以这个过程执行了几次
//    int n = 0;
//    while (a != 0||b!= 0 )
//    {
//        int min = 0;
//        if (a > b)
//        {
//           
//                min = b;
//        }
//        else
//        {
//            min = a;
//        }
//       
//        a = a % 2;
//        b = b % 2;
//
//        if (a  == 0 && b == 0)
//        {
//            n++;
//        }
//        else if (a  != 0 || b == 0)
//        {
//            printf("%d", cifang(n));
//            break;
//        }
//        else if (a  == 0 || b != 0)
//        {
//            printf("%d", cifang(n));
//            break;
//        }
//        
//        else 
//        {
//            printf("%d", cifang(n));
//            break;
//        }
//    }

   
    //当两个都不能被整除（%2！=0） 此时除以2 的次数的次方就是两个数的最大公约数。
    ////////////////////////////////////////////////////////////////////////////////
    //方法一：                     暴力解法
   /*     int max = 0;
            if (a > b)
                max = a;
            else
                max = b;
        int c = max;
        while (1)
        {
            if (a % c == 0 && b % c == 0)
                {
                    printf("找到公因数=%d", c);
                    break;
                }
             c--;
        }*/
//}
///////////////////////辗转相除法/////////////////////////////////////////////////////////
//将余数赋值给b ，b给a，再一次%;
//int main()
//{
//    int a = 0;
//    int b = 0;
//    int c = 0;// ----余数----
//    scanf("%d %d", &a, &b);
//    while (c = a % b)
//    {
//        a = b;
//        b = c;
//    }
//    printf("%d", b);
//       
//    return 0;
//
//}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////1-100的素数（未完成）////////////
//int main()
//{
//    int arr[100];
//    for (int i = 0; i < 100; i++)
//    {
//        arr[i] = i;
//    }
//    int a = 0;
//    int k = 0;
//    int i = 1;
//    
//    while (1)
//    {
//        for (int j = 2; j < arr[i]; j++)
//        {
//
//            if (arr[i] % j == 0)
//                break;
//
//        }
//    }
//         
//   
//   
//
//    return 0;
//}
//int age(int x)
//{
//    int z;
//    if (x == 1)
//        z = 20;
//    else
//        z = age(x - 1) + 3;
//    return 0;
//}
//int main()
//{
//    int i, j;
//    j = age(i);
//    printf("%d", j);
//    return 0;
//}



























